##########################
# Fngi Make script
# This python script not only build fngi, but also:
# - Generates source code to avoid boilerplate
# - Runs tests

import os
import re
import time
from itertools import chain
import subprocess
import pathlib

##########################
# Utility Functions

def write(path, contents):
  with open(path, 'w') as f: f.write(contents)

def gcc_run(args):
  subprocess.run(["gcc", "-o", "bin/run"] + args, check=True)
  time.sleep(0.3) # For gcc error logging
  subprocess.run(["bin/run"])
  os.remove("bin/run")

##########################
# Generating Source Code
# This repository has a fair amount of duplicated code between different
# libraries. The source of truth for that code changes depending on the context.
# In general:
# - Contants are kept in kernel/constants.sp
# - Error codes are kept in kernel/errors.sp
# - Global variable offsets are kept in kernel/kernel.h, generated by etc/gen.c


c_header = '''/** @file {filename}
 * DO NOT EDIT MANUALLY! THIS FILE WAS GENERATED BY etc/make.py
 *
 * @brief {brief}
 */
#ifndef {defname}
#define {defname}
{include}

{content}

#endif // {defname}
'''

fngi_types = '''
typedef uint8_t              U1;
typedef uint16_t             U2;
typedef uint32_t             U4;
typedef uint32_t             UA;
typedef int8_t               I1;
typedef int16_t              I2;
typedef int32_t              I4;
typedef uint32_t             Ref;
'''

CONST_SP_REGEX = re.compile( r'#(?P<value>[\w_]+)\s+#0=(?P<name>.+)', re.MULTILINE)

def defname(filename): return '__' + filename.upper().replace('.', '_').replace('/', '_')

def find_constants(path):
  if path.endswith('.sp'): regex = CONST_SP_REGEX
  else: assert False, path
  with open(path, 'r') as f:
    text = f.read()
  for m in re.finditer(regex, text):
    yield (m.group('name'), int(m.group('value'), 16))

def constants_h():
  constants = '\n'.join(
    f'#define {name.split()[0]:<20} 0x{value:X}' for name, value
    in chain(
      find_constants('kernel/constants.sp'),
      find_constants('kernel/errors.sp'))
  )

  filename = 'kernel/constants.h'
  write(
    filename,
    c_header.format(
      filename=filename,
      brief = "Contains common types in fngi",
      defname=defname(filename),
      include="",
      content=constants),
  )

def gen_c(): gcc_run(["etc/gen.c"])

##########################
# Building and Testing Fngi

def build():
  subprocess.run(["gcc", "-o", "bin/kernel", "linux/kernel.c"], check=True)
  time.sleep(0.3) # For gcc error logging

def test():
  subprocess.run(["./bin/kernel"])

if __name__ == '__main__':
  pathlib.Path("bin/").mkdir(exist_ok=True)
  constants_h()
  gen_c()
  build()
  test()

