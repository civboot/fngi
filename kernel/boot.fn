\ TODO: see notes/ufn.md for current thoughts

\ Bootstraps the fngi language.
\ Requires: boot.sp
\
\ Note: at this stage the language is severely restricted and several
\ pieces of the language are incomplete. Any CAPITAL items like FN, IF, LOOP
\ etc do not behave in the way their lower-case counterparts will behave.
\ Refer to boot.sp for all documentation.
$fngi  $STORE_PUB

\ **********
\ * [1] Extra core functions
syn FN =  panic(E_cToken)    \ prevent hanging =
syn FN )  panic(E_cParen)    \ prevent hanging )
pub syn        FN dv      notNow; $c1(DV); jmp:h1(d_vGet(colonRef))
pub pre inline FN memSet  $h1(2) dv:DV_memSet  ret; \ [&dst v len]   "dst = v"
pub pre inline FN memCmp  $h1(2) dv:DV_memCmp  ret; \ [&a &b len -> cmp]
pub pre inline FN memMove $h1(2) dv:DV_memMove ret; \ [&dst &src len] "dst = src"
pub pre        FN memClr  0 swp; jmp:memSet(\a, \len)   \ [&a len] clear

FN ftBeN \ [addr: &U1, sz: U1 -> v]
  IF(dup\sz == 1) drp\sz; ret ftBe1(\addr); END
  IF(   \sz == 2)         ret ftBe2(\addr); END
  ret ftBe4(\addr)

pub pre FN dictRefMaybe \ [&root -> &node(nullable)]
  scan;  DV_comp_dGet -> dv:DV_comp; ret; 

inline pre FN >     $h1(2) swp -> (\a < \b;)  ret;     \ [a b -> a > b]
inline pre FN <=    $h1(2) swp -> (\a >= \b;) ret;     \ [a b -> a <= b]
$(tAssert(2 > 1)  tAssertNot(2 > 2)  tAssert(2 <= 2)  tAssertNot(2 <= 1))

inline pre FN le_s  $h1(2) swp -> (\a ge_s \b;)  ret;  \ [a b -> a <= b]
inline pre FN gt_s  $h1(2) swp -> (\a lt_s \b;)  ret;  \ [a b -> a >= b]
$tAssert(gt_s(neg 1, neg 2)) $tAssertNot(gt_s(neg 2, neg 2))
$tAssert(gt_s(2, neg 7))
$tAssert(le_s(neg 2, neg 2)) $tAssert(le_s(neg 3, neg 2))
$tAssert(le_s(neg 1, 100))

pre FN compNext \ [asNow]
  $declVar(declL compFn,           0, RSIZE) $declEnd
  IF(\asNow) fnRef:_now;  ELSE  fnRef:baseCompFn;  END
  dup\fnRef -> updateCompFn(\fnRef) -> SET compFn \ {fnRef}
  xlw(\fnRef);  ret(GET compFn -> SET G_compFn)

\ **********
\ * [2] Inline slices: strings and tokens
pub syn FN |  notNow; \ [-> dat len] Define a string slice
  h1(SZ1 + SLC); heap; h1(0); \ {start}
  LOOP l0  charNextEsc; \ {start, char, unknownEscape
    \ IF (\unknownEscape) assert(dup\char == 0c|, E_cStr);
    IF (\unknownEscape) assert(dup\char == 0c|, E_cStr);
    ELSE IF (dup\char == 0c|)
      drp\char; (heap - ovr\start) -> dec; \ {start len}
      assert(0xFF >= ovr\len, E_cNotFit);
      swp; sr1(\len, \start); ret;
    END END  h1(\char);
  AGAIN l0
$STORE_PRIV
FN helloWorld  ret |Hello World!|  \ [-> dat len]
$tAssertEq(helloWorld, 12); \ len == 12
$tAssertEq(ft1(dup\dat), 0cH);  $tAssertEq(ft1(inc(\dat)), 0ce); \ "He"

$STORE_PUB
pub pre FN slcCmp \ [&a aLen &b bLen -> cmp]
  $declVar(declL b,    TY_VAR_INPUT, RSIZE)
  $declVar(declL bLen, TY_VAR_INPUT, RSIZE)
  $declEnd
  IF(dup\aLen < GET bLen) drp; drp; ret(neg 1); END
  IF(   \aLen > GET bLen)      drp; ret(    1); END
  ret memCmp(\a, GET b, GET bLen)
pub pre FN slcEq  ret(slcCmp() == 0)
pub pre FN tokenEq ret(slcEq(\(...), tokenDat, tokenPlc))

$STORE_PRIV
FN helloBobby  ret |Hello Bobby!|  \ [-> dat len]
$tAssert   (slcEq(helloWorld, helloWorld))
$tAssertNot(slcEq(helloWorld, helloBobby))
$tAssertEq(slcCmp(helloWorld, helloWorld),     0) \ is equal
$tAssert(  slcCmp(helloWorld, 0, 42)      lt_s 0) \ different lengths
$tAssert(  slcCmp(helloWorld, helloBobby) gt_s 0) \ different contents

$STORE_PUB
FN SLC_DO     ret |do|
FN SLC_DOT    ret |.|
FN SLC_ELIF   ret |elif|
FN SLC_ELSE   ret |else|
FN SLC_EQUAL  ret |=|
FN SLC_PAREN  ret |(|

pre FN expectToken \ [<token/s> slc err -> &node(nullable)]
  $declVar(declL err, TY_VAR_INPUT, RSIZE)
  $declVar(declL node, 0, RSIZE)  $declEnd
  dictRefMaybe(0) -> SET node; \ {slc}
  assert(tokenEq(\slc), GET err)
  ret GET node

pre pub FN equals \ [`= token` asNow -> ?value]
  expectToken(SLC_EQUAL, E_needEqual) -> drp;
  ret compNext(\asNow)

pub syn FN const  \ `const token = token`
  $declVar(declL node, 0, RSIZE)  $declEnd
  notNow; dictAdd(0, 0) -> SET node;
  ret d_vSet(equals(TRUE), GET node)

$STORE_PRIV
const const42 = 0x42;         $tAssertEq(const42, 0x42)
const const49 = (0x42 + 7);   $tAssertEq(const49, 0x49)
$STORE_PUB

pub syn FN decl \ decl:token(meta, value) manually declare a dictionary entry
  $declVar(declL node, 0, RSIZE) $declEnd
  notNow; colon; xx:dictAdd(0, 0) -> SET node;
  compNext(TRUE) -> d_vSet(\value, GET node) -> d_mSet(\meta, GET node);
  ret;

\ **********
\ * [XX] Types
\ Types are a reference on the end of DNodes iff the C_TYPED bit is set.
\ Depending on the type, they point to either (for CONST, VAR) a single tyitem
\ or (for FN, STRUCT, etc) a "typestream" which is a stream of tyitems.
\
\ All tyitems start with a byte:
\    CN-- ----   C=constructed  N=named
\
\ If N=1, then the next bytes are the counted name (U1 count followed by data)
\
\ If C=0, it is not constructed, meaning it is a native type. In this case:
\    0NSS VRRR  N=named  S=size  R=reference depth  V=variant
\ - The variants are either 0=unsigned 1=signed
\ - The sizes are the same as instructions
\ - The reference depth is a count of the number of `&` in the type.
\
\ If C=1 it is constructed, the meta is:
\     1NTT -RRR
\ N=named  T=size of type reference  R=reference depth
\
\ Then there is T size bytes of the type reference. R is the reference depth
\
\ Below we just implement a few of the native types necessary for bootstrapping fn.
\ In general, these will be stored with the fn definition.
const META_CONSTRUCTED = 0x80;
const META_NAME        = 0x40;
const META_TSZ_MSK     = 0x30;
const META_TSZ_SHIFT   = 4;   \ T needs to be shifted by 4 to get value

const TY_DICT_MSK    = 0x07;
const TY_DICT_NATIVE = 0x00;
const TY_DICT_BITMAP = 0x01;
const TY_DICT_STRUCT = 0x02;
const TY_DICT_ENUM   = 0x03;
const TY_DICT_MOD    = 0x04;
const TY_DICT_SUBMOD = 0x05;

const TY_NATIVE_SIGNED = 0x08;
const TY_NATIVE_REF    = 0x07; \ mask

const _native = (TY_DICT jn TY_DICT_NATIVE)

decl:U1    (_native jn                     SZ1, 0)
decl:U2    (_native jn                     SZ2, 0)
decl:U4    (_native jn                     SZ4, 0)
decl:Slot  (_native jn                     SZR, 0)
decl:I1    (_native jn TY_NATIVE_SIGNED jn SZ1, 0)
decl:I2    (_native jn TY_NATIVE_SIGNED jn SZ2, 0)
decl:I4    (_native jn TY_NATIVE_SIGNED jn SZ4, 0)
decl:ISlot (_native jn TY_NATIVE_SIGNED jn SZR, 0)
$assertDictM(_native jn SZR) Slot

pre FN isTyDict     ret((d_mGet(\node) msk META_TY_MASK) == TY_DICT)
pre FN isDictNative ret((d_mGet(\node) msk TY_DICT_MSK) == TY_DICT_NATIVE)
pre FN isDictStruct ret((d_mGet(\node) msk TY_DICT_MSK) == TY_DICT_STRUCT)

pre FN countChr \ [chr -> numChr] and advance past them
  0\(chr, count) -> LOOP l0; 
    swp \ {count chr}
    IF(dup\chr == peekChr) swp; inc(\count); tokenPlcSet(1);
    ELSE         drp\chr; ret \count; END
  AGAIN l0
$tAssertEq(countChr(0c&) & &&, 3)   $tAssertEq(countChr(0c&) 0)

FN readTy \ [-> numRefs &DNode]
  $declVar(declL node,    0, RSIZE) $declEnd
  countChr(0c&); ret assert(isTyDict(dictRef(0) -> dup), E_needType)
$tAssertEq(readTy &&U1, dnode:U1)   -> $tAssertEq(\numRefs, 2)
$tAssertEq(readTy Slot, dnode:Slot) -> $tAssertEq(\numRefs, 0)

\ TODO: callers need to instead get a reference to _typeSz
\ Initial typesize implementation, will be replaced
pre FN _typeSz \ [&Type -> szBytes]
  assert(isDictNative(dup\type), E_intern)
  ret szIToSz(d_mGet(\type) msk SZ_MASK)

pre FN isFnAndSyn \ &node
  retIfNot(dup)
  IF(not isTyFn(dup)) drp; ret FALSE END
  ret isFnSyn(\node);

\ inp, x:U1, y: &U2
\ inp(x: U1, y: &U2)

pre FN _varImpl \ [meta]
  $declVar(declL meta, TY_VAR_INPUT, 1) $declEnd
  IF(isFnAndSyn(dictRefMaybe(0)))
    ret single(FALSE) \ next token is syn, run it (it may run us)
  END
  tokenPlcSet(0); \ revert dictRefMaybe
  IF(GET meta)
    declL -> colon -> readTy; \ {&Local isLocal=1 numRefs &Type}
  ELSE
    0, 1 -> _comment -> colon -> readTy; \ {NULL, isLocal=1, numRefs, &Type}
  END
  \ TODO: register type
  IF(swp\numRefs) drp; RSIZE
  ELSE  _typeSz(\type);  END \ {&Local isLocal szBytes}

  IF(GET meta)  GET meta -> swp -> declVar;
  ELSE \stk     drp; drp; drp; END
  ret;

FN _inp
  $declVar(declL compFn,  0, RSIZE)  $declEnd
  updateCompFn(fnRef:_inp) -> SET compFn;
  _varImpl($L(TY_VAR jn TY_VAR_INPUT))
  GET compFn -> SET G_compFn; ret;
pub syn FN inp
  notNow; assert(getCState(C_FN_STATE) >= FN_STATE_STK, E_fnStateInp)
  setCState(FN_STATE_INP, C_FN_STATE) \ start inp state
  _inp; ret;

$STORE_PRIV \ test input by truncating values
pre FN testInp  inp x:U1 $declEnd  ret(GET x)
$tAssertEq(testInp(0x101), 1)

pre FN testInp3  inp (x:U1  y:U2  z: &U1)  $declEnd
  ret(GET x, GET y, GET z)
$testInp3(0x101\1, 0x12345\1000, 0x6789ABC)
$tAssertEq(0x6789ABC)  $tAssertEq(0x2345)  $tAssertEq(0x01)

$STORE_PUB
FN _var
  $declVar(declL compFn,  0, RSIZE)  $declEnd
  updateCompFn(fnRef:_var) -> SET compFn;
  _varImpl(TY_VAR);  GET compFn -> SET G_compFn; ret;
pub syn FN var  notNow;
  assert(getCState(C_FN_STATE) != FN_STATE_NO, E_fnStateVar); 
  ret _var;

FN _stk
  $declVar(declL compFn,  0, RSIZE)  $declEnd
  updateCompFn(fnRef:_stk) -> SET compFn;
  _varImpl(0);       GET compFn -> SET G_compFn; ret;
pub syn FN stk  notNow; 
  assertEq(getCState(C_FN_STATE), FN_STATE_STK, E_fnStateStk); 
  ret _stk;

FN _out
  $declVar(declL compFn,  0, RSIZE)  $declEnd
  updateCompFn(fnRef:_out) -> SET compFn;
  _varImpl(0);       GET compFn -> SET G_compFn; ret;
pub syn FN out  notNow; 
  assert(getCState(C_FN_STATE) >= FN_STATE_STK, E_fnStateOut);
  setCState(FN_STATE_INP, C_FN_STATE) \ start inp state
  ret _out;

$STORE_PRIV
pre FN testVar \ x -> x + 1
  var x: U1 $declEnd  \x -> SET x; ret inc(GET x)
$tAssertEq(testVar(0x101), 2)

\ **********
\ * [3] fn
\ fn myFn stk(a:U1 b:U2) inp c:U2; var i:U2; inp d:Ref
\ -> out(x:Ref y:Ref) do (
\   var i:U2 = 7;
\   ... code
\   var j:U2 = 10;
\   ... code
\ )
$STORE_PUB
pub syn FN fn  notNow;
  xx:FN(FALSE)
  LOOP l0
    dictRefMaybe(0) \ {&Node}
    IF(tokenEq(SLC_DO)) \ function body
      drp\node; declInpEnd; scan; single(FALSE); ret declFnEnd;
    END
    assert(isFnAndSyn(\node), E_fnSyn); single(FALSE) \ compile syn fns
  AGAIN l0

$STORE_PRIV
pre fn testFn stk(a:Slot) inp(b:U2) do ( GET b ->  swp ->  ret; )
$(testFn(0x1234, 0x12345) -> tAssertEq(0x1234) -> tAssertEq(0x2345))

\ **********
\ * [4] if elif else, also $if ...
$STORE_PUB

fn cToSlc stk(cdat: &U1) -> out(dat: &U1, len: U2) do (
  ret (inc(dup\cdat) \(cdat, dat) -> swp -> ft1(\cdat))
)

\ TODO: I can remove recursion here and use a loop instead
fn _if do ( \ [] recursive fn of `if`
  var h: &U1  $declEnd
  scan; single(FALSE) \ compile token after `if`
  xx:IF(FALSE\asNow) -> SET h \ compile IF
  expectToken(SLC_DO, E_cToken) -> drp;
  scan; single(FALSE); \ compile token after `do`
  IF(scan; tokenEq(SLC_ELIF))
    xx:ELSE(GET h, FALSE\asNow) -> SET h;
    _if; \ recurse for next elif/else clause
  ELSE IF(tokenEq(SLC_ELSE))
    xx:ELSE(GET h, FALSE\asNow) -> SET h;
    scan; single(FALSE);
  ELSE tokenPlcSet(0); \ reset token (peeking)
  END END 
  ret _END(GET h, dup)
)

pre fn _ifNowLogic stk(done: Slot) -> out(a: Slot) do (
  IF(dup\done) 
    _comment; expectToken(SLC_DO, E_cToken) -> drp; 
    _comment; ret \done; END
  drp\done;  scan; single(TRUE) -> \ifChk;
  expectToken(SLC_DO, E_cToken) -> drp;
  expectToken(SLC_PAREN, E_needParen) -> drp; tokenPlcSet(0);
  IF(\ifChk) compNext(FALSE); ret TRUE; END
  _comment; ret FALSE;
)

FN _ifNow \ [] fn of `if` for the asNow case
  _ifNowLogic(FALSE) \ {done}
  LOOP l0
  IF(scan; tokenEq(SLC_ELIF))
    _ifNowLogic(\done); AGAIN l0
  ELSE IF(tokenEq(SLC_ELSE))
    IF(\done) _comment;
    ELSE      compNext(FALSE)  END
  ELSE drp\done; tokenPlcSet(0); \ reset token (peeking)
  END END ret;

syn fn if do (IF(\asNow) _ifNow; ELSE _if; END ret;)

$STORE_PRIV
pre fn testIf2 stk(a:Slot) -> out(b:Slot) do ( \ converts 1->4, 2->7, else: 13
  if(dup == 1)  do (drp; ret 4)
  elif(\a == 2) do (     ret 7)
  ret (0x99)
)
$tAssertEq(testIf2(1), 4)      $tAssertEq(testIf2(2), 7)
$tAssertEq(testIf2(12), 0x99)  $assertNoWs

pre fn testManyElif inp(a:Slot) -> out(b:Slot) do ( \ [a -> b] ...
  if   (GET a < 0x10) do ret(0x1000 + GET a)
  elif (GET a < 0x20) do ret(0x2000 + GET a)
  elif (GET a < 0x30) do ret(0x3000 + GET a)
  elif (GET a < 0x40) do    (0x4000 + GET a) \ note: fallthrough
  else ret(0x10 + GET a);
  ret inc(\fallthrough);
)
$tAssertEq(testManyElif(0x5),  0x1005)  $tAssertEq(testManyElif(0x17), 0x2017)
$tAssertEq(testManyElif(0x22), 0x3022)  $tAssertEq(testManyElif(0x33), 0x4034)
$tAssertEq(testManyElif(0x55), 0x65)

$assertNoWs
$if(1) do ($0x42)           -> $tAssertEq(0x42)
$if(1) do ($0x42) else ($7) -> $tAssertEq(0x42)
$if 0  do ($0x42) else ($7) -> $tAssertEq(7)

$tAssertEq(if(1) do ($42) else ($3), 42)

$if 0 do ($0x42) elif(0) do ($3) elif(1) do ($0x44) else ($0x77)
$tAssertEq(0x44)

fn testIfNow do (ret($if(0) do (4) else (0x3F + 3)))  $assertNoWs
$tAssertEq(testIfNow, 0x42)

$STORE_PUB

\ **********
\ * [5] struct
\ Structs are a dict node with a value to a root node, and type to a typestream
\ of the struct fields. The byte structure is:
\
\   numFields:U1 | ... fields
\
\ struct Foo (
\   a: U2,
\   b: &U1,
\ )

\ **********
\ *   [5.a] utilities
const LOC_LOCAL = 0;
const LOC_PRIV  = 1;
const LOC_PUB   = 2;

pre fn locBBA stk(l:U1) do (
  if(dup\l == LOC_LOCAL) do (drp; ret REF G_bbaLocal)
  elif(\l == LOC_PRIV  ) do (     ret GET G_bbaPriv)
  ret GET G_bbaPub;
)

fn nameLoc -> out(loc:U1) do ( \ location names are stored
  if(C_LOCAL    msk GET G_cstate) do ret LOC_LOCAL
  if(C_PUB_NAME msk GET G_cstate) do ret LOC_PUB else ret LOC_PRIV;
)

pre fn bumpName \ stk(size:U2, aligned:U1) -> out(_:&U1) 
do (
  ret BBA_bump(\size, \aligned, locBBA(nameLoc));
)

pre fn needUnalignedSz stk(ref:Slot) -> out(sz:U1) do (
  if(dup\ref < 0x100)      do (drp; ret 1;)
  if(dup\ref < inc 0xFFFF) do (drp; ret 2;)
  ret 4;
)

\ **********
\ *   [5.a] struct declaration

pre large fn _field do ( \ compile a struct field
  dv_log(0x3000, 1, 0x10);
  var compFn: &Slot; updateCompFn(fnRef:_field) -> SET compFn;
  dv_log(0x3001, 1, 0x10);
  IF(isFnAndSyn(dictRefMaybe(0)))
    dv_log(0x30E0, 1, 0x10);
    single(FALSE) \ next token is syn, run it (it may run us)
    dv_log(0x30E1, 1, 0x10);
  ELSE
    dv_log(0x3002, 1, 0x10);
    var ref: &U1; d_tyGet(GET G_curNode) -> SET ref;
      sr1(inc ft1(GET ref), GET ref) \ struct.ty.numFields += 1
    dv_log(0x3001, 1, 0x10);
    \ Reserve then move cfield name
    bumpName(1, FALSE) -> SET ref; bumpName(tokenPlc + 1, FALSE) \ {&cname}
    memMove(inc(\cname), tokenDat, tokenPlc); \ move cfield name
    sr1(tokenPlc, inc GET ref);               \ set cfield count
    colon; var tyNode: &Slot; readTy -> SET tyNode; \ {numRefs}
    sr1(\numRefs jn META_NAME  \ store the ty meta
        jn (needUnalignedSz(GET tyNode) shl META_TSZ_SHIFT),
        GET ref)
  END
  GET compFn -> SET G_compFn; ret;
)

\ Then do BBA_bump INLINE
syn large fn struct do (  notNow;
  dv_log(0x1000, 1, 0x10);
  dictAdd(NULL, $L(C_TYPED jn TY_DICT jn TY_DICT_STRUCT)) -> SET G_curNode;
  var ty: &U1; bumpName(1, FALSE\aligned) -> SET ty;
  d_tySet(GET ty, GET G_curNode);
  sr1(0\numFields, GET ty);
  dv_log(0x1001, 1, 0x10);
  _field;
  dv_log(0x10FF, 1, 0x10);
  ret;
)

\ **********
\ *   [5.c] tyitem utilities

struct DNode (
  l: &DNode;  r: &DNode
  ckey: &U1;  v: Slot;    m: U2;
)

fn isTyped stk(n: &DNode) -> out(_:U1) do ret(d_mGet(\n) msk C_TYPED)

fn isTyStruct stk(node: &DNode) -> out(_:U1) do (
  isTyDict(dup\node) -> swp -> isDictStruct(\node) -> and -> ret;
)


fn tyitem_cname stk(ty: &U1) -> out(cname: &U1) do (
  if(ft1(dup\ty) msk META_NAME) do ( ret inc\ty; )
  else                             ( drp\ty; ret NULL; )
)

\ Return reference to the data (either ref or native byte)
fn tyitem_dat stk(ty: &U1) -> out(dat: &U1) do (
  if(ft1(dup\ty) msk META_NAME) do ( \ skip name
    ret (dup\ty + inc2 ft1(inc\ty;)) \ ty + nameCount+2
  ) ret inc\ty;
)

fn tyitem_node stk(ty: &U1) -> out(node: &DNode) do (
  assert(dup\ty msk META_CONSTRUCTED, E_intern);
  ft1(dup\ty) -> msk META_TSZ_MSK -> shr META_TSZ_SHIFT \ {ty tsz}
  ret(swp -> tyitem_dat(\ty) -> swp -> jmp:ftBeN(\tdat, \tsz))
)

fn tyitem_sz stk(ty: &U1) -> out(sz: U2) do (
  if(ft1(dup\tyitem) msk META_CONSTRUCTED) do (
    \ FIXME: ... I need forward references for this
    \ ret struct_sz(tyitem_node(\ty));
  )  ret szIToSz(ft1(tyitem_dat(\ty)));
)

fn tyitemNext inp(ty: &U1) -> out(_: &U1) do (
  GET ty; \ {&out}
  if(not (ft1(GET ty) msk META_CONSTRUCTED)) do (
    \out + ((META_TSZ_MSK msk ft1(GET ty)) shr META_TSZ_SHIFT)
  )
  if(ft1(GET ty) msk META_NAME) do ( \out + ft1(inc GET ty) )
  ret \out;
)

\ **********
\ *   [5.d] struct field walker

fn walkTy stk(ty: &U1) inp(ctx: &Slot, f: &Slot) do (
  \ type of fn: [&tyitem &ctx -> ]
  var numFields: U2; ft1(dup\ty) -> SET numFields;
  inc\ty; LOOP l0  \ {&tyitem}
    if(not GET numFields) do ( drp\tyitem; ret; )
    (dec GET numFields) -> SET numFields;
    xlw(dup\tyitem, GET ctx, GET f)
    tyitemNext(\ty);
  AGAIN l0
)

fn _structSzWalker inp(tyitem: &U1, sz: &U2) do (
  tyitem_sz(GET tyitem) -> align(reqAlign(dup\sz)) \ {sz aligned}
  sr2(\sz + \aligned, GET sz)
)

large fn struct_sz stk(s: &DNode) -> out(sz: U2) do (
  var sz: U2; 0 -> SET sz;
  assert(isTyStruct(dup\s, E_type));
  walkTy(d_tyGet(\s), REF sz, fnRef:_structSzWalker);
  ret align(GET sz, reqAlign(GET sz));
)


\ struct Ctx ( offset: u2 )
\ fn structSz inp(struct: &DNode) -> out(sz:U2) do (
\   var numFields: U2; ft1(d_tyGet(GET struct)) -> SET numFields;
\   0; LOOP l0 \ {sz}
\     retIfNot(GET numFields);
\   AGAIN l0
\ )


\ struct Ctx ( offset: U2, done: U1, tyitem: &U1 )
\ fn _fieldNameWalker inp(tyitem: &U1, ctx: &U2) do (
\   if(tokenEq(cToSlc(tyitemCName(GET tyitem)))) do (
\     assert(fto:2(GET ctx), E_struct) \ field not yet found
\ 
\     \ 1. align current type and set as offset
\     \ 2. update done=true
\     \ 3. update ctx.tyitem
\     fto:RSIZE(GET ctx) 
\ 
\     ft2(GET ctx) jn 0x8000 
\ 
\     if(ft2(dup\ctx) msk 0x8000) do ( drp; drp; ret; )
\     
\   ) drp\tyitem; drp\ctx; ret;
\ 
\ )
\ 
\ fn _fieldNameWalker stk(tyitem: &U1, ctx: &U1) do (
\   swp;
\   if(tokenEq(cToSlc(tyitemCName(dup\tyitem)))) do (
\     swp -> srR(\tyitem, \ctx); ret;
\   ) drp\tyitem; drp\ctx;       ret;
\ )
\ 
\ 
\ \ offsetOf:MyStruct.myField
\ syn fn offsetOf do ( notNow;
\   colon; dictRef(NULL) \ {&Struct}
\   assert(isTyStruct(dup, E_type)); expectToken(SLC_DOT);
\   scan; structField(\struct)
\ )

\ **********
\ * [6] dot compiler
\
\ There are a few variations on the dot compiler:
\  - dot compiler: for accessing locals, globals, fnrefs, ec
\  - hash compiler: for fields and methods of types on the stack
\
\ Rule: Dot compiler syntax, as long as there are dots, it will consume them:
\
\ .a            \ get locals, globals, constants
\ .a.b          \ get local/global "field" (struct, module)
\ .a      = ()  \ set locals, globals
\ .a.b    = ()  \ set local/global "field"
\
\ .&a           \ reference to local/global
\ .&a.b         \ reference to local/global "field"
\ .@@a          \ de-reference local/global
\ .@a     = ()  \ de-reference and asign local/global
\
\ Hash compiler syntax uses the type on the typestack. It has the same syntax.
\ The above examples with a single item are invalid. Otherwise:
\
\ \(.a) #b      \ get stk field (struct)
\ \(.a) #&b     \ get ref to stk field (struct)
\ \(.a) #@b     \ dereference stk field (struct)


\ decl:DotMeta(TY_DICT jn TY_DICT_STRUCT, 0)
\ \ The strategy is to use recursion to build up DotMeta
\ \   offset: U2, \ current built-up offset from the base.
\ \   refs: U1,   \ number of `&`
\ \   ats: U1,    \ number of `@`
\ \   \ the starting node, which has the base type (local, global, etc)
\ \   base: &DNode,
\ const DM_offset = 0;
\ const DM_refs = 2;
\ const DM_ats = 3;
\ const DM_base = 4;

\ This is quickly exploding in complexity... use the strategy mentioned above.
\ large fn _dot inp(root: &DNode, offset: U2, asNow:U1) do (
\   var refs: U1;  var ats: U1;
\   var node: &DNode;
\   countChr(0c&) -> SET refs;  countChr(0c@) -> SET ats;
\   (countChr(0c&) + GET refs) -> SET refs;
\   if((GET refs > 0) and (GET ats > 0)) do panic(E_dot);
\   assert(GET refs < 2, E_dot);
\   dictRef(GET root) -> SET node;
\ 
\   \ TODO: this isn't quite right... the single needs to get
\   \ from the root I give it!
\   if(isTyConst(GET node)) do ret single(GET asNow);
\ 
\   if(isTyDict(GET node)) do (
\     GET offset + 
\     if(scan; tokenEq(SLC_DOT)) do ret _dot(GET node, GET asNow);
\     \ Else: struct value
\     tokenPlcSet(0) \ reset scan
\     if(isDictStruct(
\     unimpl; \ struct value, aka an offset.
\   )
\ 
\   \ Else: get the value
\   if(GET refs) do jmp:_ref(GET node, GET asNow)
\ 
\ )

\ pub syn large fn . inp asNow:U1 do (
\ )

$assertNoWs
