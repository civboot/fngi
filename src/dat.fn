\ Core types operating directly on data

struct CStr [ len:U2  dat:Arr[ ? U1] ]
\ struct Ring [ dat:&U1;  head:U2; tail:U2 _cap:U2 ]

\ struct BaseFile [
\   ring: Ring \ buffer for reading or writing data
\   code: U2   \ status or error (File_*)
\ ]

\ Note: declared by native
\ struct SlcU1 [ dat:&U1  len:U2 ]
struct Block  [ dat:Arr[4092 U1]; bot:U2; top:U2 ]
struct BANode [ next:&BANode; prev:&BANode; block:&Block ]
struct BA     [ free:&BANode; len:S ]
struct BBA    [ ba:&BA; dat:&BANode ]

role Arena [
  absmeth drop [&Self]
  absmeth free [&Self, &Any, S\sz, U2\alignment -> &SlcU1 ]
  absmeth alloc[&Self,       S\sz, U2\alignment -> &Any]
  absmeth maxAlloc[&Self -> S]
]

role Reader [
  absmeth read [&Self]
]

\ Note: method implementations are native (see fngi.c)
unty use:BBA (
  meth drop     [stk:&Self      ] do;
  meth free     [stk:&Self stk\dat:&Any stk\sz:S stk\alignment:U2 -> &SlcU1 ] do;
  meth alloc    [stk:&Self              stk\sz:S stk\alignment:U2 -> &Any] do;
  meth maxAlloc [stk:&Self -> S ] do;
)

impl BBA:Arena {
  drop = &BBA.drop
  free = &BBA.free
  alloc = &BBA.alloc
  maxAlloc = &BBA.maxAlloc
}

use:SlcU1 (
  meth get[self:&Self i:S -> U1] do (
    @ptrAdd(self.dat, i, self.len)
  )
)

\ This must be kept in-sync with the C code
use:comp struct Globals [
  bbaDict: &BBA
  \ ... TODO
]

\ Note: value is set in native (see fngi.c)
use:comp(
  global g: &Globals;
)
