\ Core types operating directly on data

\ Note: declared by native
\ struct Slc [ dat:&U1  len:U2 ]

unty const NULL:&Any = 0
const FALSE:S = 0
const TRUE:S  = 1

const TRACE:U1 = 0x10
const DEBUG:U1 = 0x08
const INFO :U1 = 0x04
const WARN :U1 = 0x02
const ERROR:U1 = 0x01
const LOG_NEVER:U1 = 0x00

struct Buf  [ parent:Slc cap:U2 ]
struct CStr [ len:U2  dat:Arr[ ? U1] ]
struct Ring [ dat:&U1  head:U2  tail:U2  _cap:U2 ]

struct Stk  [ dat:&S  sp:U2  cap:U2 ]
struct Sll  [ next:&Self ]
struct SllS [ parent:Sll  v:S ]
struct Bst  [ l:&Self  r:&Self]
struct CBst [ parent:Bst  key:&CStr ]


impl S (
  fn min[a:S, b:S -> S] do ( if(a < b) do a else b )
  fn max[a:S, b:S -> S] do ( if(a < b) do b else a )
)

impl U2 (
  fn min[a:U2, b:U2 -> U2] do ( if(a < b) do a else b )
  fn max[a:U2, b:U2 -> U2] do ( if(a < b) do b else a )
)

impl SI (
  \ TODO: make inline
  fn <  [stk:SI, stk:SI -> S] do ( lt_s; )
  fn >= [stk:SI, stk:SI -> S] do ( ge_s; )

  fn min[a:SI, b:SI -> SI] do ( if(a.< b) do a else b )
  fn max[a:SI, b:SI -> SI] do ( if(a SI.< b) do b else a )
)

impl Slc (
  meth @ [self:&Self i:S -> U1] do (
    root.@ptrAdd(self.dat, i, self.len)
  )

  meth cmp [self:&Self, s:Slc -> I4] do (
    var len:U2 = U2.min(self.len, s.len)
    var l:&U1 = self.dat; var r:&U1 = s.dat
    var i:U2 = 0;
    blk(
      if(i >= len) do break;
      if(@l == @r) do (
        \ unty (l = inc l; r = inc r);
        l = ptrAdd(l, 1, len) r = ptrAdd(r, 1, len)
        i = U2(inc i)
        cont;
        )
      if(@l < @r) do ret (--1)
      else           ret (  1);
    )
    if  (self.len == s.len) do (SI 0)
    elif(self.len <  s.len) do ( --1)
    else                       (SI 1)
  )
)

\ ************
\ * Arena

struct Block  [
  const SIZE: U2 = 0x1000;
  dat:Arr[(Block.SIZE - 4) U1];  bot:U2;  top:U2
]
struct BANode [ next:&BANode; prev:&BANode; block:&Block ]
struct BA     [ free:&BANode; len:S ]
struct BBA    [ ba:&BA; dat:&BANode ]

role Arena [
  absmeth drop [&Self]
  absmeth free [&Self, &Any, S\sz, U2\alignment -> &Slc]
  absmeth alloc[&Self,       S\sz, U2\alignment -> &Any]
  absmeth maxAlloc[&Self -> S]
]

\ Note: method implementations are native (see fngi.c)
unty impl BBA (
  meth drop     [stk:&Self      ] do;
  meth free     [stk:&Self stk\dat:&Any stk\sz:S stk\alignment:U2 -> &Slc ] do;
  meth alloc    [stk:&Self              stk\sz:S stk\alignment:U2 -> &Any] do;
  meth maxAlloc [stk:&Self -> S ] do;
)

impl BBA:Arena {
  drop = &BBA.drop
  free = &BBA.free
  alloc = &BBA.alloc
  maxAlloc = &BBA.maxAlloc
}

\ ************
\ * File + Fmt

struct BaseFile [
  ring: Ring \ buffer for reading or writing data
  code: U2   \ status or error (File_*)
]

\ Note: method implementations are native (see fngi.c)
role Reader [
  absmeth read   [&Self]
  absmeth asBase [&Self -> &BaseFile]
]

role Writer [
  absmeth asBase [&Self -> &BaseFile]
  absmeth write  [&Self]
]

struct FmtState [ arena:Arena;  pretty:U2; ]

\ TODO: embed roles
\ role Fmt [
\   absmeth asBase   [&Self -> &BaseFile]
\   absmeth write    [&Self]
\   absmeth fmtState [&Self -> &FmtState]
\ ]

\ ************
\ * Logger

struct LogConfig [ lvl:U1 ]

role Logger [
  absmeth asBase    [&Self       -> &BaseFile]
  absmeth write     [&Self]
  absmeth fmtState  [&Self       -> &FmtState]
  absmeth logConfig [&Self       -> &LogConfig]
  absmeth start     [&Self S     -> U1        ]
  absmeth add       [&Self Slc]
  absmeth end       [&Self]
]
