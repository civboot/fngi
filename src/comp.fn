\ Compiler constants
\ Note: etc/gen.py converts this into gen/comp.h
\ TODO: Stk, CStr, Sll

fileUse  comp
fileImpl comp

\ Auto-generates bin/const.h
const CSZ_CATCH : U2 = 0xFF

\ Token types
const T_NUM     : U2 = 0x0
const T_HEX     : U2 = 0x1
const T_ALPHA   : U2 = 0x2
const T_SINGLE  : U2 = 0x3
const T_SYMBOL  : U2 = 0x4
const T_WHITE   : U2 = 0x5

const C_UNTY        :U4 = 0x0008 \ G_cstate: do not perform type checking.
const C_FN_STATE    :U4 = 0x0007 \ G_cstate: mask of current FN position
const FN_STATE_NO   :U4 = 0x0000 \ not compiling a fn
const FN_STATE_BODY :U4 = 0x0001 \ compiling FN body
const FN_STATE_STK  :U4 = 0x0002 \ can declare stk inputs
const FN_STATE_INP  :U4 = 0x0003 \ can declare inp inputs
const FN_STATE_OUT  :U4 = 0x0004 \ can declare outputs

const TY_UNSIZED    :U2 = 0xFFFF \ the "arrLen" of an unsized type

\ ***********
\ * Dict Ty Bits (meta byte): [TTXX XXXX] T=TY_MASK
const TY_MASK       :U1 = 0xC0 \ upper two bits determine type
const TY_VAR        :U1 = 0x40 \ variable (local, global, struct field, etc). Has varMeta
const TY_FN         :U1 = 0x80 \ function, can be called and has an fnMeta
const TY_DICT       :U1 = 0xC0 \ a "dictionary" type which has dictMeta.

\ TY_FN meta bits: [01N- FFFF] N=native M=method F=fnTy
const TY_FN_NATIVE  :U1  = 0x20  \ is a native function (i.e. C)

const TY_FN_TY_MASK :U1 = 0x0F \ Function type mask
const TY_FN_NORMAL  :U1 = 0x00 \ Normally compiled, can use 'imm#' to make IMM
const TY_FN_IMM     :U1 = 0x01 \ Required to be run as IMM (must use 'imm#')
const TY_FN_SYN     :U1 = 0x02 \ (syntactical) always run imm (knowing asImm)
const TY_FN_SYNTY   :U1 = 0x03 \ syntactical type: can implement generics
const TY_FN_INLINE  :U1 = 0x04 \ Inline function, copies bytes when compiled.
const TY_FN_COMMENT :U1 = 0x05 \ Comment function. Executed immediately.
const TY_FN_METH    :U1 = 0x06 \ Struct method
const TY_FN_ABSMETH :U1 = 0x07 \ Role method to be overriden
const TY_FN_SIG     :U1 = 0x0F \ Fn signature

\ TY_VAR meta bits: [10TT ----] A=alias G=global C=constant
\ G=0 on a struct/enum is a field, G=0 on a fn is a local
const TY_VAR_MSK    :U1 = 0x30
const TY_VAR_LOCAL  :U1 = 0x00
const TY_VAR_GLOBAL :U1 = 0x10
const TY_VAR_CONST  :U1 = 0x20
const TY_VAR_ALIAS  :U1 = 0x30

\ TY_DICT meta bits: [11-- -DDD] D=dictType
const TY_DICT_MSK    :U1 = 0x07
const TY_DICT_NATIVE :U1 = 0x00
const TY_DICT_MOD    :U1 = 0x01
const TY_DICT_BITMAP :U1 = 0x02
const TY_DICT_STRUCT :U1 = 0x03
const TY_DICT_ENUM   :U1 = 0x04
const TY_DICT_ROLE   :U1 = 0x05

const TY_NATIVE_SIGNED :U1 = 0x08
const TY_REFS          :U1 = 0x03

struct FileInfo [ path:&CStr;  line:U2 ]

struct TyBase   [
  parent:Bst
  meta:U2
]

struct TyI [
  parent:Sll
  meta:U2  arrLen:U2
  name:&CStr
  ty:&TyBase
]
struct TyIBst [ parent: Bst;  tyI: TyI ]
struct Key    [ name: Slc;  tyI: &TyI ]

struct TyDict declared

struct Ty [
  parent:TyBase;
  line:U2        \ src code line definition
  name:&CStr;  tyKey:&TyI
  container:&TyDict
  file:&FileInfo
]

struct TyDict [
  parent:Ty
  children:&Ty
  fields:&TyI
  sz:U2
]

struct DictStk [ dat:&&TyDict  sp:U2  cap:U2 ]

struct TyVar [ parent:Ty;  v:S;  tyI:&TyI ]
struct InOut [ inp:&TyI;       out:&TyI ]
struct FnSig [ parent:TyBase;  io:InOut ]

struct TyFn [
  parent:Ty
  locals:&Ty
  code:&U1
  inp:&TyI; out:&TyI
  len:U2
  lSlots:U1
]

struct TyDb [
  bba:&BBA
  tyIs:Stk\(&TyI)
  done:Stk
]

struct Blk [
  parent:Sll
  start:S
  breaks:&Sll \ store breaks (to update at end of block)
  startTyI:&TyI  endTyI:&TyI  \ types at start+end(incl break) of block
]

struct GlobalsCode [
  src:Reader  srcInfo:&FileInfo
  token:Buf
  code:Buf
  metaNext:U2 \ meta of next fn
  cstate:U2;
  fnLocals:U2 \ locals size
  fnState:U1
  blk_:&Blk
  compFn:&TyFn  \ current function that does compilation
]


struct Globals [
  c:GlobalsCode
  bbaDict:&BBA
  rootDict:TyDict
  dictStk:DictStk  implStk:DictStk
  cBst:&CBst  tyIBst:&TyIBst  fnSigBst:&FnSig
  tyDb:TyDb   tyDbImm:TyDb    bbaTyImm:BBA
]

global g:&Globals = NULL \ initialized by native code

